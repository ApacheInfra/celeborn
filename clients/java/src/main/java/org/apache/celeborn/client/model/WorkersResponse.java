/*
 * Celeborn Master REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: user@celeborn.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.apache.celeborn.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.apache.celeborn.client.model.WorkerInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.celeborn.client.JSON;

/**
 * WorkersResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class WorkersResponse {
  public static final String SERIALIZED_NAME_WORKERS = "workers";
  @SerializedName(SERIALIZED_NAME_WORKERS)
  private List<WorkerInfo> workers = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOST_WORKERS = "lostWorkers";
  @SerializedName(SERIALIZED_NAME_LOST_WORKERS)
  private List<WorkerInfo> lostWorkers = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDED_WORKERS = "excludedWorkers";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_WORKERS)
  private List<WorkerInfo> excludedWorkers = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANUAL_EXCLUDED_WORKERS = "manualExcludedWorkers";
  @SerializedName(SERIALIZED_NAME_MANUAL_EXCLUDED_WORKERS)
  private List<WorkerInfo> manualExcludedWorkers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHUTDOWN_WORKERS = "shutdownWorkers";
  @SerializedName(SERIALIZED_NAME_SHUTDOWN_WORKERS)
  private List<WorkerInfo> shutdownWorkers = new ArrayList<>();

  public static final String SERIALIZED_NAME_DECOMMISSION_WORKERS = "decommissionWorkers";
  @SerializedName(SERIALIZED_NAME_DECOMMISSION_WORKERS)
  private List<WorkerInfo> decommissionWorkers = new ArrayList<>();

  public WorkersResponse() {
  }

  public WorkersResponse workers(List<WorkerInfo> workers) {
    this.workers = workers;
    return this;
  }

  public WorkersResponse addWorkersItem(WorkerInfo workersItem) {
    if (this.workers == null) {
      this.workers = new ArrayList<>();
    }
    this.workers.add(workersItem);
    return this;
  }

   /**
   * The workers.
   * @return workers
  **/
  @javax.annotation.Nonnull
  public List<WorkerInfo> getWorkers() {
    return workers;
  }

  public void setWorkers(List<WorkerInfo> workers) {
    this.workers = workers;
  }


  public WorkersResponse lostWorkers(List<WorkerInfo> lostWorkers) {
    this.lostWorkers = lostWorkers;
    return this;
  }

  public WorkersResponse addLostWorkersItem(WorkerInfo lostWorkersItem) {
    if (this.lostWorkers == null) {
      this.lostWorkers = new ArrayList<>();
    }
    this.lostWorkers.add(lostWorkersItem);
    return this;
  }

   /**
   * The lost workers.
   * @return lostWorkers
  **/
  @javax.annotation.Nullable
  public List<WorkerInfo> getLostWorkers() {
    return lostWorkers;
  }

  public void setLostWorkers(List<WorkerInfo> lostWorkers) {
    this.lostWorkers = lostWorkers;
  }


  public WorkersResponse excludedWorkers(List<WorkerInfo> excludedWorkers) {
    this.excludedWorkers = excludedWorkers;
    return this;
  }

  public WorkersResponse addExcludedWorkersItem(WorkerInfo excludedWorkersItem) {
    if (this.excludedWorkers == null) {
      this.excludedWorkers = new ArrayList<>();
    }
    this.excludedWorkers.add(excludedWorkersItem);
    return this;
  }

   /**
   * The excluded workers.
   * @return excludedWorkers
  **/
  @javax.annotation.Nullable
  public List<WorkerInfo> getExcludedWorkers() {
    return excludedWorkers;
  }

  public void setExcludedWorkers(List<WorkerInfo> excludedWorkers) {
    this.excludedWorkers = excludedWorkers;
  }


  public WorkersResponse manualExcludedWorkers(List<WorkerInfo> manualExcludedWorkers) {
    this.manualExcludedWorkers = manualExcludedWorkers;
    return this;
  }

  public WorkersResponse addManualExcludedWorkersItem(WorkerInfo manualExcludedWorkersItem) {
    if (this.manualExcludedWorkers == null) {
      this.manualExcludedWorkers = new ArrayList<>();
    }
    this.manualExcludedWorkers.add(manualExcludedWorkersItem);
    return this;
  }

   /**
   * The manual excluded workers.
   * @return manualExcludedWorkers
  **/
  @javax.annotation.Nullable
  public List<WorkerInfo> getManualExcludedWorkers() {
    return manualExcludedWorkers;
  }

  public void setManualExcludedWorkers(List<WorkerInfo> manualExcludedWorkers) {
    this.manualExcludedWorkers = manualExcludedWorkers;
  }


  public WorkersResponse shutdownWorkers(List<WorkerInfo> shutdownWorkers) {
    this.shutdownWorkers = shutdownWorkers;
    return this;
  }

  public WorkersResponse addShutdownWorkersItem(WorkerInfo shutdownWorkersItem) {
    if (this.shutdownWorkers == null) {
      this.shutdownWorkers = new ArrayList<>();
    }
    this.shutdownWorkers.add(shutdownWorkersItem);
    return this;
  }

   /**
   * The shutdown workers.
   * @return shutdownWorkers
  **/
  @javax.annotation.Nullable
  public List<WorkerInfo> getShutdownWorkers() {
    return shutdownWorkers;
  }

  public void setShutdownWorkers(List<WorkerInfo> shutdownWorkers) {
    this.shutdownWorkers = shutdownWorkers;
  }


  public WorkersResponse decommissionWorkers(List<WorkerInfo> decommissionWorkers) {
    this.decommissionWorkers = decommissionWorkers;
    return this;
  }

  public WorkersResponse addDecommissionWorkersItem(WorkerInfo decommissionWorkersItem) {
    if (this.decommissionWorkers == null) {
      this.decommissionWorkers = new ArrayList<>();
    }
    this.decommissionWorkers.add(decommissionWorkersItem);
    return this;
  }

   /**
   * The decommission workers.
   * @return decommissionWorkers
  **/
  @javax.annotation.Nullable
  public List<WorkerInfo> getDecommissionWorkers() {
    return decommissionWorkers;
  }

  public void setDecommissionWorkers(List<WorkerInfo> decommissionWorkers) {
    this.decommissionWorkers = decommissionWorkers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkersResponse workersResponse = (WorkersResponse) o;
    return Objects.equals(this.workers, workersResponse.workers) &&
        Objects.equals(this.lostWorkers, workersResponse.lostWorkers) &&
        Objects.equals(this.excludedWorkers, workersResponse.excludedWorkers) &&
        Objects.equals(this.manualExcludedWorkers, workersResponse.manualExcludedWorkers) &&
        Objects.equals(this.shutdownWorkers, workersResponse.shutdownWorkers) &&
        Objects.equals(this.decommissionWorkers, workersResponse.decommissionWorkers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workers, lostWorkers, excludedWorkers, manualExcludedWorkers, shutdownWorkers, decommissionWorkers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkersResponse {\n");
    sb.append("    workers: ").append(toIndentedString(workers)).append("\n");
    sb.append("    lostWorkers: ").append(toIndentedString(lostWorkers)).append("\n");
    sb.append("    excludedWorkers: ").append(toIndentedString(excludedWorkers)).append("\n");
    sb.append("    manualExcludedWorkers: ").append(toIndentedString(manualExcludedWorkers)).append("\n");
    sb.append("    shutdownWorkers: ").append(toIndentedString(shutdownWorkers)).append("\n");
    sb.append("    decommissionWorkers: ").append(toIndentedString(decommissionWorkers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("workers");
    openapiFields.add("lostWorkers");
    openapiFields.add("excludedWorkers");
    openapiFields.add("manualExcludedWorkers");
    openapiFields.add("shutdownWorkers");
    openapiFields.add("decommissionWorkers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("workers");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WorkersResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkersResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkersResponse is not found in the empty JSON string", WorkersResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkersResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkersResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkersResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("workers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workers` to be an array in the JSON string but got `%s`", jsonObj.get("workers").toString()));
      }

      JsonArray jsonArrayworkers = jsonObj.getAsJsonArray("workers");
      // validate the required field `workers` (array)
      for (int i = 0; i < jsonArrayworkers.size(); i++) {
        WorkerInfo.validateJsonElement(jsonArrayworkers.get(i));
      };
      if (jsonObj.get("lostWorkers") != null && !jsonObj.get("lostWorkers").isJsonNull()) {
        JsonArray jsonArraylostWorkers = jsonObj.getAsJsonArray("lostWorkers");
        if (jsonArraylostWorkers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lostWorkers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lostWorkers` to be an array in the JSON string but got `%s`", jsonObj.get("lostWorkers").toString()));
          }

          // validate the optional field `lostWorkers` (array)
          for (int i = 0; i < jsonArraylostWorkers.size(); i++) {
            WorkerInfo.validateJsonElement(jsonArraylostWorkers.get(i));
          };
        }
      }
      if (jsonObj.get("excludedWorkers") != null && !jsonObj.get("excludedWorkers").isJsonNull()) {
        JsonArray jsonArrayexcludedWorkers = jsonObj.getAsJsonArray("excludedWorkers");
        if (jsonArrayexcludedWorkers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("excludedWorkers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `excludedWorkers` to be an array in the JSON string but got `%s`", jsonObj.get("excludedWorkers").toString()));
          }

          // validate the optional field `excludedWorkers` (array)
          for (int i = 0; i < jsonArrayexcludedWorkers.size(); i++) {
            WorkerInfo.validateJsonElement(jsonArrayexcludedWorkers.get(i));
          };
        }
      }
      if (jsonObj.get("manualExcludedWorkers") != null && !jsonObj.get("manualExcludedWorkers").isJsonNull()) {
        JsonArray jsonArraymanualExcludedWorkers = jsonObj.getAsJsonArray("manualExcludedWorkers");
        if (jsonArraymanualExcludedWorkers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("manualExcludedWorkers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manualExcludedWorkers` to be an array in the JSON string but got `%s`", jsonObj.get("manualExcludedWorkers").toString()));
          }

          // validate the optional field `manualExcludedWorkers` (array)
          for (int i = 0; i < jsonArraymanualExcludedWorkers.size(); i++) {
            WorkerInfo.validateJsonElement(jsonArraymanualExcludedWorkers.get(i));
          };
        }
      }
      if (jsonObj.get("shutdownWorkers") != null && !jsonObj.get("shutdownWorkers").isJsonNull()) {
        JsonArray jsonArrayshutdownWorkers = jsonObj.getAsJsonArray("shutdownWorkers");
        if (jsonArrayshutdownWorkers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shutdownWorkers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shutdownWorkers` to be an array in the JSON string but got `%s`", jsonObj.get("shutdownWorkers").toString()));
          }

          // validate the optional field `shutdownWorkers` (array)
          for (int i = 0; i < jsonArrayshutdownWorkers.size(); i++) {
            WorkerInfo.validateJsonElement(jsonArrayshutdownWorkers.get(i));
          };
        }
      }
      if (jsonObj.get("decommissionWorkers") != null && !jsonObj.get("decommissionWorkers").isJsonNull()) {
        JsonArray jsonArraydecommissionWorkers = jsonObj.getAsJsonArray("decommissionWorkers");
        if (jsonArraydecommissionWorkers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("decommissionWorkers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `decommissionWorkers` to be an array in the JSON string but got `%s`", jsonObj.get("decommissionWorkers").toString()));
          }

          // validate the optional field `decommissionWorkers` (array)
          for (int i = 0; i < jsonArraydecommissionWorkers.size(); i++) {
            WorkerInfo.validateJsonElement(jsonArraydecommissionWorkers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkersResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkersResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkersResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkersResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkersResponse>() {
           @Override
           public void write(JsonWriter out, WorkersResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkersResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkersResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkersResponse
  * @throws IOException if the JSON string is invalid with respect to WorkersResponse
  */
  public static WorkersResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkersResponse.class);
  }

 /**
  * Convert an instance of WorkersResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

