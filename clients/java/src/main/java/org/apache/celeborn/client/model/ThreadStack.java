/*
 * Celeborn Master REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: user@celeborn.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.apache.celeborn.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.celeborn.client.JSON;

/**
 * ThreadStack
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class ThreadStack {
  public static final String SERIALIZED_NAME_THREAD_ID = "threadId";
  @SerializedName(SERIALIZED_NAME_THREAD_ID)
  private String threadId;

  public static final String SERIALIZED_NAME_THREAD_NAME = "threadName";
  @SerializedName(SERIALIZED_NAME_THREAD_NAME)
  private String threadName;

  public static final String SERIALIZED_NAME_THREAD_STATE = "threadState";
  @SerializedName(SERIALIZED_NAME_THREAD_STATE)
  private String threadState;

  public static final String SERIALIZED_NAME_STACK_TRACE = "stackTrace";
  @SerializedName(SERIALIZED_NAME_STACK_TRACE)
  private List<String> stackTrace = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLOCKED_BY_THREAD_ID = "blockedByThreadId";
  @SerializedName(SERIALIZED_NAME_BLOCKED_BY_THREAD_ID)
  private Integer blockedByThreadId;

  public static final String SERIALIZED_NAME_BLOCKED_BY_LOCK = "blockedByLock";
  @SerializedName(SERIALIZED_NAME_BLOCKED_BY_LOCK)
  private String blockedByLock;

  public static final String SERIALIZED_NAME_HOLDING_LOCKS = "holdingLocks";
  @SerializedName(SERIALIZED_NAME_HOLDING_LOCKS)
  private List<String> holdingLocks = new ArrayList<>();

  public ThreadStack() {
  }

  public ThreadStack threadId(String threadId) {
    this.threadId = threadId;
    return this;
  }

   /**
   * The id of the thread.
   * @return threadId
  **/
  @javax.annotation.Nonnull
  public String getThreadId() {
    return threadId;
  }

  public void setThreadId(String threadId) {
    this.threadId = threadId;
  }


  public ThreadStack threadName(String threadName) {
    this.threadName = threadName;
    return this;
  }

   /**
   * The name of the thread.
   * @return threadName
  **/
  @javax.annotation.Nonnull
  public String getThreadName() {
    return threadName;
  }

  public void setThreadName(String threadName) {
    this.threadName = threadName;
  }


  public ThreadStack threadState(String threadState) {
    this.threadState = threadState;
    return this;
  }

   /**
   * The state of the thread.
   * @return threadState
  **/
  @javax.annotation.Nonnull
  public String getThreadState() {
    return threadState;
  }

  public void setThreadState(String threadState) {
    this.threadState = threadState;
  }


  public ThreadStack stackTrace(List<String> stackTrace) {
    this.stackTrace = stackTrace;
    return this;
  }

  public ThreadStack addStackTraceItem(String stackTraceItem) {
    if (this.stackTrace == null) {
      this.stackTrace = new ArrayList<>();
    }
    this.stackTrace.add(stackTraceItem);
    return this;
  }

   /**
   * The stacktrace of the thread.
   * @return stackTrace
  **/
  @javax.annotation.Nonnull
  public List<String> getStackTrace() {
    return stackTrace;
  }

  public void setStackTrace(List<String> stackTrace) {
    this.stackTrace = stackTrace;
  }


  public ThreadStack blockedByThreadId(Integer blockedByThreadId) {
    this.blockedByThreadId = blockedByThreadId;
    return this;
  }

   /**
   * The id of the thread that the current thread is blocked by.
   * @return blockedByThreadId
  **/
  @javax.annotation.Nullable
  public Integer getBlockedByThreadId() {
    return blockedByThreadId;
  }

  public void setBlockedByThreadId(Integer blockedByThreadId) {
    this.blockedByThreadId = blockedByThreadId;
  }


  public ThreadStack blockedByLock(String blockedByLock) {
    this.blockedByLock = blockedByLock;
    return this;
  }

   /**
   * The lock that the current thread is blocked by.
   * @return blockedByLock
  **/
  @javax.annotation.Nullable
  public String getBlockedByLock() {
    return blockedByLock;
  }

  public void setBlockedByLock(String blockedByLock) {
    this.blockedByLock = blockedByLock;
  }


  public ThreadStack holdingLocks(List<String> holdingLocks) {
    this.holdingLocks = holdingLocks;
    return this;
  }

  public ThreadStack addHoldingLocksItem(String holdingLocksItem) {
    if (this.holdingLocks == null) {
      this.holdingLocks = new ArrayList<>();
    }
    this.holdingLocks.add(holdingLocksItem);
    return this;
  }

   /**
   * The locks that the current thread is holding.
   * @return holdingLocks
  **/
  @javax.annotation.Nullable
  public List<String> getHoldingLocks() {
    return holdingLocks;
  }

  public void setHoldingLocks(List<String> holdingLocks) {
    this.holdingLocks = holdingLocks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThreadStack threadStack = (ThreadStack) o;
    return Objects.equals(this.threadId, threadStack.threadId) &&
        Objects.equals(this.threadName, threadStack.threadName) &&
        Objects.equals(this.threadState, threadStack.threadState) &&
        Objects.equals(this.stackTrace, threadStack.stackTrace) &&
        Objects.equals(this.blockedByThreadId, threadStack.blockedByThreadId) &&
        Objects.equals(this.blockedByLock, threadStack.blockedByLock) &&
        Objects.equals(this.holdingLocks, threadStack.holdingLocks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(threadId, threadName, threadState, stackTrace, blockedByThreadId, blockedByLock, holdingLocks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThreadStack {\n");
    sb.append("    threadId: ").append(toIndentedString(threadId)).append("\n");
    sb.append("    threadName: ").append(toIndentedString(threadName)).append("\n");
    sb.append("    threadState: ").append(toIndentedString(threadState)).append("\n");
    sb.append("    stackTrace: ").append(toIndentedString(stackTrace)).append("\n");
    sb.append("    blockedByThreadId: ").append(toIndentedString(blockedByThreadId)).append("\n");
    sb.append("    blockedByLock: ").append(toIndentedString(blockedByLock)).append("\n");
    sb.append("    holdingLocks: ").append(toIndentedString(holdingLocks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("threadId");
    openapiFields.add("threadName");
    openapiFields.add("threadState");
    openapiFields.add("stackTrace");
    openapiFields.add("blockedByThreadId");
    openapiFields.add("blockedByLock");
    openapiFields.add("holdingLocks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("threadId");
    openapiRequiredFields.add("threadName");
    openapiRequiredFields.add("threadState");
    openapiRequiredFields.add("stackTrace");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ThreadStack
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ThreadStack.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThreadStack is not found in the empty JSON string", ThreadStack.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ThreadStack.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThreadStack` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ThreadStack.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("threadId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threadId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threadId").toString()));
      }
      if (!jsonObj.get("threadName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threadName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threadName").toString()));
      }
      if (!jsonObj.get("threadState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threadState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threadState").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("stackTrace") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("stackTrace").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stackTrace` to be an array in the JSON string but got `%s`", jsonObj.get("stackTrace").toString()));
      }
      if ((jsonObj.get("blockedByLock") != null && !jsonObj.get("blockedByLock").isJsonNull()) && !jsonObj.get("blockedByLock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockedByLock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockedByLock").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("holdingLocks") != null && !jsonObj.get("holdingLocks").isJsonNull() && !jsonObj.get("holdingLocks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `holdingLocks` to be an array in the JSON string but got `%s`", jsonObj.get("holdingLocks").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThreadStack.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThreadStack' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThreadStack> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThreadStack.class));

       return (TypeAdapter<T>) new TypeAdapter<ThreadStack>() {
           @Override
           public void write(JsonWriter out, ThreadStack value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThreadStack read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ThreadStack given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ThreadStack
  * @throws IOException if the JSON string is invalid with respect to ThreadStack
  */
  public static ThreadStack fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThreadStack.class);
  }

 /**
  * Convert an instance of ThreadStack to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

