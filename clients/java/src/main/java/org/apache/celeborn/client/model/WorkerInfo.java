/*
 * Celeborn Master REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: user@celeborn.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.apache.celeborn.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.celeborn.client.JSON;

/**
 * WorkerInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class WorkerInfo {
  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_RPC_PORT = "rpcPort";
  @SerializedName(SERIALIZED_NAME_RPC_PORT)
  private Integer rpcPort;

  public static final String SERIALIZED_NAME_PUSH_PORT = "pushPort";
  @SerializedName(SERIALIZED_NAME_PUSH_PORT)
  private Integer pushPort;

  public static final String SERIALIZED_NAME_FETCH_PORT = "fetchPort";
  @SerializedName(SERIALIZED_NAME_FETCH_PORT)
  private Integer fetchPort;

  public static final String SERIALIZED_NAME_REPLICATE_PORT = "replicatePort";
  @SerializedName(SERIALIZED_NAME_REPLICATE_PORT)
  private Integer replicatePort;

  public static final String SERIALIZED_NAME_INTERNAL_PORT = "internalPort";
  @SerializedName(SERIALIZED_NAME_INTERNAL_PORT)
  private Integer internalPort;

  public static final String SERIALIZED_NAME_SLOT_USED = "slotUsed";
  @SerializedName(SERIALIZED_NAME_SLOT_USED)
  private Integer slotUsed;

  public static final String SERIALIZED_NAME_LAST_HEARTBEAT = "lastHeartbeat";
  @SerializedName(SERIALIZED_NAME_LAST_HEARTBEAT)
  private Long lastHeartbeat;

  public static final String SERIALIZED_NAME_HEARTBEAT_ELAPSED_SECONDS = "heartbeatElapsedSeconds";
  @SerializedName(SERIALIZED_NAME_HEARTBEAT_ELAPSED_SECONDS)
  private Long heartbeatElapsedSeconds;

  public static final String SERIALIZED_NAME_DISK_INFOS = "diskInfos";
  @SerializedName(SERIALIZED_NAME_DISK_INFOS)
  private Map<String, String> diskInfos = new HashMap<>();

  public static final String SERIALIZED_NAME_RESOURCE_CONSUMPTION = "resourceConsumption";
  @SerializedName(SERIALIZED_NAME_RESOURCE_CONSUMPTION)
  private Map<String, String> resourceConsumption = new HashMap<>();

  public static final String SERIALIZED_NAME_WORKER_REF = "workerRef";
  @SerializedName(SERIALIZED_NAME_WORKER_REF)
  private String workerRef;

  public static final String SERIALIZED_NAME_WORKER_STATE = "workerState";
  @SerializedName(SERIALIZED_NAME_WORKER_STATE)
  private String workerState;

  public static final String SERIALIZED_NAME_WORKER_STATE_START_TIME = "workerStateStartTime";
  @SerializedName(SERIALIZED_NAME_WORKER_STATE_START_TIME)
  private Long workerStateStartTime;

  public WorkerInfo() {
  }

  public WorkerInfo host(String host) {
    this.host = host;
    return this;
  }

   /**
   * The host of the worker.
   * @return host
  **/
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public WorkerInfo rpcPort(Integer rpcPort) {
    this.rpcPort = rpcPort;
    return this;
  }

   /**
   * The rpc port of the worker.
   * @return rpcPort
  **/
  @javax.annotation.Nonnull
  public Integer getRpcPort() {
    return rpcPort;
  }

  public void setRpcPort(Integer rpcPort) {
    this.rpcPort = rpcPort;
  }


  public WorkerInfo pushPort(Integer pushPort) {
    this.pushPort = pushPort;
    return this;
  }

   /**
   * The push port of the worker.
   * @return pushPort
  **/
  @javax.annotation.Nonnull
  public Integer getPushPort() {
    return pushPort;
  }

  public void setPushPort(Integer pushPort) {
    this.pushPort = pushPort;
  }


  public WorkerInfo fetchPort(Integer fetchPort) {
    this.fetchPort = fetchPort;
    return this;
  }

   /**
   * The fetch port of the worker.
   * @return fetchPort
  **/
  @javax.annotation.Nonnull
  public Integer getFetchPort() {
    return fetchPort;
  }

  public void setFetchPort(Integer fetchPort) {
    this.fetchPort = fetchPort;
  }


  public WorkerInfo replicatePort(Integer replicatePort) {
    this.replicatePort = replicatePort;
    return this;
  }

   /**
   * The replicate port of the worker.
   * @return replicatePort
  **/
  @javax.annotation.Nonnull
  public Integer getReplicatePort() {
    return replicatePort;
  }

  public void setReplicatePort(Integer replicatePort) {
    this.replicatePort = replicatePort;
  }


  public WorkerInfo internalPort(Integer internalPort) {
    this.internalPort = internalPort;
    return this;
  }

   /**
   * The internal port of the worker.
   * @return internalPort
  **/
  @javax.annotation.Nonnull
  public Integer getInternalPort() {
    return internalPort;
  }

  public void setInternalPort(Integer internalPort) {
    this.internalPort = internalPort;
  }


  public WorkerInfo slotUsed(Integer slotUsed) {
    this.slotUsed = slotUsed;
    return this;
  }

   /**
   * The slot used of the worker.
   * @return slotUsed
  **/
  @javax.annotation.Nullable
  public Integer getSlotUsed() {
    return slotUsed;
  }

  public void setSlotUsed(Integer slotUsed) {
    this.slotUsed = slotUsed;
  }


  public WorkerInfo lastHeartbeat(Long lastHeartbeat) {
    this.lastHeartbeat = lastHeartbeat;
    return this;
  }

   /**
   * The last heartbeat timestamp of the worker.
   * @return lastHeartbeat
  **/
  @javax.annotation.Nullable
  public Long getLastHeartbeat() {
    return lastHeartbeat;
  }

  public void setLastHeartbeat(Long lastHeartbeat) {
    this.lastHeartbeat = lastHeartbeat;
  }


  public WorkerInfo heartbeatElapsedSeconds(Long heartbeatElapsedSeconds) {
    this.heartbeatElapsedSeconds = heartbeatElapsedSeconds;
    return this;
  }

   /**
   * The elapsed seconds since the last heartbeat of the worker.
   * @return heartbeatElapsedSeconds
  **/
  @javax.annotation.Nullable
  public Long getHeartbeatElapsedSeconds() {
    return heartbeatElapsedSeconds;
  }

  public void setHeartbeatElapsedSeconds(Long heartbeatElapsedSeconds) {
    this.heartbeatElapsedSeconds = heartbeatElapsedSeconds;
  }


  public WorkerInfo diskInfos(Map<String, String> diskInfos) {
    this.diskInfos = diskInfos;
    return this;
  }

  public WorkerInfo putDiskInfosItem(String key, String diskInfosItem) {
    if (this.diskInfos == null) {
      this.diskInfos = new HashMap<>();
    }
    this.diskInfos.put(key, diskInfosItem);
    return this;
  }

   /**
   * a map of disk name and disk info.
   * @return diskInfos
  **/
  @javax.annotation.Nullable
  public Map<String, String> getDiskInfos() {
    return diskInfos;
  }

  public void setDiskInfos(Map<String, String> diskInfos) {
    this.diskInfos = diskInfos;
  }


  public WorkerInfo resourceConsumption(Map<String, String> resourceConsumption) {
    this.resourceConsumption = resourceConsumption;
    return this;
  }

  public WorkerInfo putResourceConsumptionItem(String key, String resourceConsumptionItem) {
    if (this.resourceConsumption == null) {
      this.resourceConsumption = new HashMap<>();
    }
    this.resourceConsumption.put(key, resourceConsumptionItem);
    return this;
  }

   /**
   * a map of identifier and resource consumption.
   * @return resourceConsumption
  **/
  @javax.annotation.Nullable
  public Map<String, String> getResourceConsumption() {
    return resourceConsumption;
  }

  public void setResourceConsumption(Map<String, String> resourceConsumption) {
    this.resourceConsumption = resourceConsumption;
  }


  public WorkerInfo workerRef(String workerRef) {
    this.workerRef = workerRef;
    return this;
  }

   /**
   * The reference of the worker.
   * @return workerRef
  **/
  @javax.annotation.Nullable
  public String getWorkerRef() {
    return workerRef;
  }

  public void setWorkerRef(String workerRef) {
    this.workerRef = workerRef;
  }


  public WorkerInfo workerState(String workerState) {
    this.workerState = workerState;
    return this;
  }

   /**
   * The state of the worker.
   * @return workerState
  **/
  @javax.annotation.Nullable
  public String getWorkerState() {
    return workerState;
  }

  public void setWorkerState(String workerState) {
    this.workerState = workerState;
  }


  public WorkerInfo workerStateStartTime(Long workerStateStartTime) {
    this.workerStateStartTime = workerStateStartTime;
    return this;
  }

   /**
   * The start time of the worker state.
   * @return workerStateStartTime
  **/
  @javax.annotation.Nullable
  public Long getWorkerStateStartTime() {
    return workerStateStartTime;
  }

  public void setWorkerStateStartTime(Long workerStateStartTime) {
    this.workerStateStartTime = workerStateStartTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkerInfo workerInfo = (WorkerInfo) o;
    return Objects.equals(this.host, workerInfo.host) &&
        Objects.equals(this.rpcPort, workerInfo.rpcPort) &&
        Objects.equals(this.pushPort, workerInfo.pushPort) &&
        Objects.equals(this.fetchPort, workerInfo.fetchPort) &&
        Objects.equals(this.replicatePort, workerInfo.replicatePort) &&
        Objects.equals(this.internalPort, workerInfo.internalPort) &&
        Objects.equals(this.slotUsed, workerInfo.slotUsed) &&
        Objects.equals(this.lastHeartbeat, workerInfo.lastHeartbeat) &&
        Objects.equals(this.heartbeatElapsedSeconds, workerInfo.heartbeatElapsedSeconds) &&
        Objects.equals(this.diskInfos, workerInfo.diskInfos) &&
        Objects.equals(this.resourceConsumption, workerInfo.resourceConsumption) &&
        Objects.equals(this.workerRef, workerInfo.workerRef) &&
        Objects.equals(this.workerState, workerInfo.workerState) &&
        Objects.equals(this.workerStateStartTime, workerInfo.workerStateStartTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, rpcPort, pushPort, fetchPort, replicatePort, internalPort, slotUsed, lastHeartbeat, heartbeatElapsedSeconds, diskInfos, resourceConsumption, workerRef, workerState, workerStateStartTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkerInfo {\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    rpcPort: ").append(toIndentedString(rpcPort)).append("\n");
    sb.append("    pushPort: ").append(toIndentedString(pushPort)).append("\n");
    sb.append("    fetchPort: ").append(toIndentedString(fetchPort)).append("\n");
    sb.append("    replicatePort: ").append(toIndentedString(replicatePort)).append("\n");
    sb.append("    internalPort: ").append(toIndentedString(internalPort)).append("\n");
    sb.append("    slotUsed: ").append(toIndentedString(slotUsed)).append("\n");
    sb.append("    lastHeartbeat: ").append(toIndentedString(lastHeartbeat)).append("\n");
    sb.append("    heartbeatElapsedSeconds: ").append(toIndentedString(heartbeatElapsedSeconds)).append("\n");
    sb.append("    diskInfos: ").append(toIndentedString(diskInfos)).append("\n");
    sb.append("    resourceConsumption: ").append(toIndentedString(resourceConsumption)).append("\n");
    sb.append("    workerRef: ").append(toIndentedString(workerRef)).append("\n");
    sb.append("    workerState: ").append(toIndentedString(workerState)).append("\n");
    sb.append("    workerStateStartTime: ").append(toIndentedString(workerStateStartTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("host");
    openapiFields.add("rpcPort");
    openapiFields.add("pushPort");
    openapiFields.add("fetchPort");
    openapiFields.add("replicatePort");
    openapiFields.add("internalPort");
    openapiFields.add("slotUsed");
    openapiFields.add("lastHeartbeat");
    openapiFields.add("heartbeatElapsedSeconds");
    openapiFields.add("diskInfos");
    openapiFields.add("resourceConsumption");
    openapiFields.add("workerRef");
    openapiFields.add("workerState");
    openapiFields.add("workerStateStartTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("host");
    openapiRequiredFields.add("rpcPort");
    openapiRequiredFields.add("pushPort");
    openapiRequiredFields.add("fetchPort");
    openapiRequiredFields.add("replicatePort");
    openapiRequiredFields.add("internalPort");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WorkerInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkerInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkerInfo is not found in the empty JSON string", WorkerInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkerInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkerInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkerInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("workerRef") != null && !jsonObj.get("workerRef").isJsonNull()) && !jsonObj.get("workerRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerRef").toString()));
      }
      if ((jsonObj.get("workerState") != null && !jsonObj.get("workerState").isJsonNull()) && !jsonObj.get("workerState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkerInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkerInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkerInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkerInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkerInfo>() {
           @Override
           public void write(JsonWriter out, WorkerInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkerInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkerInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkerInfo
  * @throws IOException if the JSON string is invalid with respect to WorkerInfo
  */
  public static WorkerInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkerInfo.class);
  }

 /**
  * Convert an instance of WorkerInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

