/*
 * Celeborn Master REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: user@celeborn.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.apache.celeborn.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.celeborn.client.JSON;

/**
 * MasterCommitInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class MasterCommitInfo {
  public static final String SERIALIZED_NAME_COMMIT_INDEX = "commitIndex";
  @SerializedName(SERIALIZED_NAME_COMMIT_INDEX)
  private String commitIndex;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CLIENT_ADDRESS = "clientAddress";
  @SerializedName(SERIALIZED_NAME_CLIENT_ADDRESS)
  private String clientAddress;

  public static final String SERIALIZED_NAME_START_UP_ROLE = "startUpRole";
  @SerializedName(SERIALIZED_NAME_START_UP_ROLE)
  private String startUpRole;

  public MasterCommitInfo() {
  }

  public MasterCommitInfo commitIndex(String commitIndex) {
    this.commitIndex = commitIndex;
    return this;
  }

   /**
   * The commit index of the master.
   * @return commitIndex
  **/
  @javax.annotation.Nonnull
  public String getCommitIndex() {
    return commitIndex;
  }

  public void setCommitIndex(String commitIndex) {
    this.commitIndex = commitIndex;
  }


  public MasterCommitInfo id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the master.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MasterCommitInfo address(String address) {
    this.address = address;
    return this;
  }

   /**
   * The address of the master.
   * @return address
  **/
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public MasterCommitInfo clientAddress(String clientAddress) {
    this.clientAddress = clientAddress;
    return this;
  }

   /**
   * The client address of the master.
   * @return clientAddress
  **/
  @javax.annotation.Nonnull
  public String getClientAddress() {
    return clientAddress;
  }

  public void setClientAddress(String clientAddress) {
    this.clientAddress = clientAddress;
  }


  public MasterCommitInfo startUpRole(String startUpRole) {
    this.startUpRole = startUpRole;
    return this;
  }

   /**
   * The start up role of the master.
   * @return startUpRole
  **/
  @javax.annotation.Nonnull
  public String getStartUpRole() {
    return startUpRole;
  }

  public void setStartUpRole(String startUpRole) {
    this.startUpRole = startUpRole;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MasterCommitInfo masterCommitInfo = (MasterCommitInfo) o;
    return Objects.equals(this.commitIndex, masterCommitInfo.commitIndex) &&
        Objects.equals(this.id, masterCommitInfo.id) &&
        Objects.equals(this.address, masterCommitInfo.address) &&
        Objects.equals(this.clientAddress, masterCommitInfo.clientAddress) &&
        Objects.equals(this.startUpRole, masterCommitInfo.startUpRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitIndex, id, address, clientAddress, startUpRole);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MasterCommitInfo {\n");
    sb.append("    commitIndex: ").append(toIndentedString(commitIndex)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    clientAddress: ").append(toIndentedString(clientAddress)).append("\n");
    sb.append("    startUpRole: ").append(toIndentedString(startUpRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commitIndex");
    openapiFields.add("id");
    openapiFields.add("address");
    openapiFields.add("clientAddress");
    openapiFields.add("startUpRole");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("commitIndex");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("clientAddress");
    openapiRequiredFields.add("startUpRole");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MasterCommitInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MasterCommitInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MasterCommitInfo is not found in the empty JSON string", MasterCommitInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MasterCommitInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MasterCommitInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MasterCommitInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("commitIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitIndex").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("clientAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientAddress").toString()));
      }
      if (!jsonObj.get("startUpRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startUpRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startUpRole").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MasterCommitInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MasterCommitInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MasterCommitInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MasterCommitInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MasterCommitInfo>() {
           @Override
           public void write(JsonWriter out, MasterCommitInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MasterCommitInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MasterCommitInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MasterCommitInfo
  * @throws IOException if the JSON string is invalid with respect to MasterCommitInfo
  */
  public static MasterCommitInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MasterCommitInfo.class);
  }

 /**
  * Convert an instance of MasterCommitInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

