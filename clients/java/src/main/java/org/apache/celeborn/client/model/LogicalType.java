/*
 * Flink SQL Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1/1.16
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.apache.celeborn.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.apache.celeborn.client.model.LogicalTypeRoot;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.apache.celeborn.client.JSON;


/**
 * LogicalType
 */
@JsonPropertyOrder({
  LogicalType.JSON_PROPERTY_TYPE_ROOT,
  LogicalType.JSON_PROPERTY_CHILDREN,
  LogicalType.JSON_PROPERTY_NULLABLE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LogicalType {
  public static final String JSON_PROPERTY_TYPE_ROOT = "typeRoot";
  private LogicalTypeRoot typeRoot;

  public static final String JSON_PROPERTY_CHILDREN = "children";
  private List<LogicalType> children = null;

  public static final String JSON_PROPERTY_NULLABLE = "nullable";
  private Boolean nullable;


  public LogicalType typeRoot(LogicalTypeRoot typeRoot) {
    this.typeRoot = typeRoot;
    return this;
  }

   /**
   * Get typeRoot
   * @return typeRoot
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPE_ROOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LogicalTypeRoot getTypeRoot() {
    return typeRoot;
  }


  public void setTypeRoot(LogicalTypeRoot typeRoot) {
    this.typeRoot = typeRoot;
  }


  public LogicalType children(List<LogicalType> children) {
    this.children = children;
    return this;
  }

  public LogicalType addChildrenItem(LogicalType childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * Get children
   * @return children
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<LogicalType> getChildren() {
    return children;
  }


  public void setChildren(List<LogicalType> children) {
    this.children = children;
  }


  public LogicalType nullable(Boolean nullable) {
    this.nullable = nullable;
    return this;
  }

   /**
   * Get nullable
   * @return nullable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NULLABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getNullable() {
    return nullable;
  }


  public void setNullable(Boolean nullable) {
    this.nullable = nullable;
  }


  /**
   * Return true if this LogicalType object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogicalType logicalType = (LogicalType) o;
    return Objects.equals(this.typeRoot, logicalType.typeRoot) &&
        Objects.equals(this.children, logicalType.children) &&
        Objects.equals(this.nullable, logicalType.nullable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeRoot, children, nullable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogicalType {\n");
    sb.append("    typeRoot: ").append(toIndentedString(typeRoot)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    nullable: ").append(toIndentedString(nullable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

