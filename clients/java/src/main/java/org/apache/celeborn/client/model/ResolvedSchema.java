/*
 * Flink SQL Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1/1.16
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.apache.celeborn.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.apache.celeborn.client.model.Column;
import org.apache.celeborn.client.model.DataType;
import org.apache.celeborn.client.model.UniqueConstraint;
import org.apache.celeborn.client.model.WatermarkSpec;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.apache.celeborn.client.JSON;


/**
 * ResolvedSchema
 */
@JsonPropertyOrder({
  ResolvedSchema.JSON_PROPERTY_COLUMNS,
  ResolvedSchema.JSON_PROPERTY_WATERMARK_SPECS,
  ResolvedSchema.JSON_PROPERTY_PRIMARY_KEY,
  ResolvedSchema.JSON_PROPERTY_PRIMARY_KEY_INDEXES,
  ResolvedSchema.JSON_PROPERTY_COLUMN_COUNT,
  ResolvedSchema.JSON_PROPERTY_COLUMN_DATA_TYPES,
  ResolvedSchema.JSON_PROPERTY_COLUMN_NAMES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ResolvedSchema {
  public static final String JSON_PROPERTY_COLUMNS = "columns";
  private List<Column> columns = null;

  public static final String JSON_PROPERTY_WATERMARK_SPECS = "watermarkSpecs";
  private List<WatermarkSpec> watermarkSpecs = null;

  public static final String JSON_PROPERTY_PRIMARY_KEY = "primaryKey";
  private UniqueConstraint primaryKey;

  public static final String JSON_PROPERTY_PRIMARY_KEY_INDEXES = "primaryKeyIndexes";
  private List<Integer> primaryKeyIndexes = null;

  public static final String JSON_PROPERTY_COLUMN_COUNT = "columnCount";
  private Integer columnCount;

  public static final String JSON_PROPERTY_COLUMN_DATA_TYPES = "columnDataTypes";
  private List<DataType> columnDataTypes = null;

  public static final String JSON_PROPERTY_COLUMN_NAMES = "columnNames";
  private List<String> columnNames = null;


  public ResolvedSchema columns(List<Column> columns) {
    this.columns = columns;
    return this;
  }

  public ResolvedSchema addColumnsItem(Column columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COLUMNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Column> getColumns() {
    return columns;
  }


  public void setColumns(List<Column> columns) {
    this.columns = columns;
  }


  public ResolvedSchema watermarkSpecs(List<WatermarkSpec> watermarkSpecs) {
    this.watermarkSpecs = watermarkSpecs;
    return this;
  }

  public ResolvedSchema addWatermarkSpecsItem(WatermarkSpec watermarkSpecsItem) {
    if (this.watermarkSpecs == null) {
      this.watermarkSpecs = new ArrayList<>();
    }
    this.watermarkSpecs.add(watermarkSpecsItem);
    return this;
  }

   /**
   * Get watermarkSpecs
   * @return watermarkSpecs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_WATERMARK_SPECS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<WatermarkSpec> getWatermarkSpecs() {
    return watermarkSpecs;
  }


  public void setWatermarkSpecs(List<WatermarkSpec> watermarkSpecs) {
    this.watermarkSpecs = watermarkSpecs;
  }


  public ResolvedSchema primaryKey(UniqueConstraint primaryKey) {
    this.primaryKey = primaryKey;
    return this;
  }

   /**
   * Get primaryKey
   * @return primaryKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PRIMARY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UniqueConstraint getPrimaryKey() {
    return primaryKey;
  }


  public void setPrimaryKey(UniqueConstraint primaryKey) {
    this.primaryKey = primaryKey;
  }


  public ResolvedSchema primaryKeyIndexes(List<Integer> primaryKeyIndexes) {
    this.primaryKeyIndexes = primaryKeyIndexes;
    return this;
  }

  public ResolvedSchema addPrimaryKeyIndexesItem(Integer primaryKeyIndexesItem) {
    if (this.primaryKeyIndexes == null) {
      this.primaryKeyIndexes = new ArrayList<>();
    }
    this.primaryKeyIndexes.add(primaryKeyIndexesItem);
    return this;
  }

   /**
   * Get primaryKeyIndexes
   * @return primaryKeyIndexes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PRIMARY_KEY_INDEXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Integer> getPrimaryKeyIndexes() {
    return primaryKeyIndexes;
  }


  public void setPrimaryKeyIndexes(List<Integer> primaryKeyIndexes) {
    this.primaryKeyIndexes = primaryKeyIndexes;
  }


  public ResolvedSchema columnCount(Integer columnCount) {
    this.columnCount = columnCount;
    return this;
  }

   /**
   * Get columnCount
   * @return columnCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COLUMN_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getColumnCount() {
    return columnCount;
  }


  public void setColumnCount(Integer columnCount) {
    this.columnCount = columnCount;
  }


  public ResolvedSchema columnDataTypes(List<DataType> columnDataTypes) {
    this.columnDataTypes = columnDataTypes;
    return this;
  }

  public ResolvedSchema addColumnDataTypesItem(DataType columnDataTypesItem) {
    if (this.columnDataTypes == null) {
      this.columnDataTypes = new ArrayList<>();
    }
    this.columnDataTypes.add(columnDataTypesItem);
    return this;
  }

   /**
   * Get columnDataTypes
   * @return columnDataTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COLUMN_DATA_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DataType> getColumnDataTypes() {
    return columnDataTypes;
  }


  public void setColumnDataTypes(List<DataType> columnDataTypes) {
    this.columnDataTypes = columnDataTypes;
  }


  public ResolvedSchema columnNames(List<String> columnNames) {
    this.columnNames = columnNames;
    return this;
  }

  public ResolvedSchema addColumnNamesItem(String columnNamesItem) {
    if (this.columnNames == null) {
      this.columnNames = new ArrayList<>();
    }
    this.columnNames.add(columnNamesItem);
    return this;
  }

   /**
   * Get columnNames
   * @return columnNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COLUMN_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getColumnNames() {
    return columnNames;
  }


  public void setColumnNames(List<String> columnNames) {
    this.columnNames = columnNames;
  }


  /**
   * Return true if this ResolvedSchema object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResolvedSchema resolvedSchema = (ResolvedSchema) o;
    return Objects.equals(this.columns, resolvedSchema.columns) &&
        Objects.equals(this.watermarkSpecs, resolvedSchema.watermarkSpecs) &&
        Objects.equals(this.primaryKey, resolvedSchema.primaryKey) &&
        Objects.equals(this.primaryKeyIndexes, resolvedSchema.primaryKeyIndexes) &&
        Objects.equals(this.columnCount, resolvedSchema.columnCount) &&
        Objects.equals(this.columnDataTypes, resolvedSchema.columnDataTypes) &&
        Objects.equals(this.columnNames, resolvedSchema.columnNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, watermarkSpecs, primaryKey, primaryKeyIndexes, columnCount, columnDataTypes, columnNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResolvedSchema {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    watermarkSpecs: ").append(toIndentedString(watermarkSpecs)).append("\n");
    sb.append("    primaryKey: ").append(toIndentedString(primaryKey)).append("\n");
    sb.append("    primaryKeyIndexes: ").append(toIndentedString(primaryKeyIndexes)).append("\n");
    sb.append("    columnCount: ").append(toIndentedString(columnCount)).append("\n");
    sb.append("    columnDataTypes: ").append(toIndentedString(columnDataTypes)).append("\n");
    sb.append("    columnNames: ").append(toIndentedString(columnNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

