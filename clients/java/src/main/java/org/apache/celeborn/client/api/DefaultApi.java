/*
 * Flink SQL Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1/1.16
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.apache.celeborn.client.api;

import org.apache.celeborn.client.ApiClient;
import org.apache.celeborn.client.ApiException;
import org.apache.celeborn.client.ApiResponse;
import org.apache.celeborn.client.Pair;

import org.apache.celeborn.client.model.CloseSessionResponseBody;
import org.apache.celeborn.client.model.ExecuteStatementRequestBody;
import org.apache.celeborn.client.model.ExecuteStatementResponseBody;
import org.apache.celeborn.client.model.FetchResultsResponseBody;
import org.apache.celeborn.client.model.GetApiVersionResponseBody;
import org.apache.celeborn.client.model.GetInfoResponseBody;
import org.apache.celeborn.client.model.GetSessionConfigResponseBody;
import org.apache.celeborn.client.model.OpenSessionRequestBody;
import org.apache.celeborn.client.model.OpenSessionResponseBody;
import org.apache.celeborn.client.model.OperationHandle;
import org.apache.celeborn.client.model.OperationStatusResponseBody;
import org.apache.celeborn.client.model.SessionHandle;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DefaultApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public DefaultApi() {
    this(new ApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * 
   * Cancel the operation.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @param operationHandle The OperationHandle that identifies a operation. (required)
   * @return OperationStatusResponseBody
   * @throws ApiException if fails to make API call
   */
  public OperationStatusResponseBody cancelOperation(SessionHandle sessionHandle, OperationHandle operationHandle) throws ApiException {
    ApiResponse<OperationStatusResponseBody> localVarResponse = cancelOperationWithHttpInfo(sessionHandle, operationHandle);
    return localVarResponse.getData();
  }

  /**
   * 
   * Cancel the operation.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @param operationHandle The OperationHandle that identifies a operation. (required)
   * @return ApiResponse&lt;OperationStatusResponseBody&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OperationStatusResponseBody> cancelOperationWithHttpInfo(SessionHandle sessionHandle, OperationHandle operationHandle) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = cancelOperationRequestBuilder(sessionHandle, operationHandle);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "cancelOperation call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<OperationStatusResponseBody>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OperationStatusResponseBody>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder cancelOperationRequestBuilder(SessionHandle sessionHandle, OperationHandle operationHandle) throws ApiException {
    // verify the required parameter 'sessionHandle' is set
    if (sessionHandle == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionHandle' when calling cancelOperation");
    }
    // verify the required parameter 'operationHandle' is set
    if (operationHandle == null) {
      throw new ApiException(400, "Missing the required parameter 'operationHandle' when calling cancelOperation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sessions/{session_handle}/operations/{operation_handle}/cancel"
        .replace("{session_handle}", ApiClient.urlEncode(sessionHandle.toString()))
        .replace("{operation_handle}", ApiClient.urlEncode(operationHandle.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Close the operation.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @param operationHandle The OperationHandle that identifies a operation. (required)
   * @return OperationStatusResponseBody
   * @throws ApiException if fails to make API call
   */
  public OperationStatusResponseBody closeOperation(UUID sessionHandle, UUID operationHandle) throws ApiException {
    ApiResponse<OperationStatusResponseBody> localVarResponse = closeOperationWithHttpInfo(sessionHandle, operationHandle);
    return localVarResponse.getData();
  }

  /**
   * 
   * Close the operation.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @param operationHandle The OperationHandle that identifies a operation. (required)
   * @return ApiResponse&lt;OperationStatusResponseBody&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OperationStatusResponseBody> closeOperationWithHttpInfo(UUID sessionHandle, UUID operationHandle) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = closeOperationRequestBuilder(sessionHandle, operationHandle);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "closeOperation call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<OperationStatusResponseBody>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OperationStatusResponseBody>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder closeOperationRequestBuilder(UUID sessionHandle, UUID operationHandle) throws ApiException {
    // verify the required parameter 'sessionHandle' is set
    if (sessionHandle == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionHandle' when calling closeOperation");
    }
    // verify the required parameter 'operationHandle' is set
    if (operationHandle == null) {
      throw new ApiException(400, "Missing the required parameter 'operationHandle' when calling closeOperation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sessions/{session_handle}/operations/{operation_handle}/close"
        .replace("{session_handle}", ApiClient.urlEncode(sessionHandle.toString()))
        .replace("{operation_handle}", ApiClient.urlEncode(operationHandle.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Closes the specific session.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @return CloseSessionResponseBody
   * @throws ApiException if fails to make API call
   */
  public CloseSessionResponseBody closeSession(UUID sessionHandle) throws ApiException {
    ApiResponse<CloseSessionResponseBody> localVarResponse = closeSessionWithHttpInfo(sessionHandle);
    return localVarResponse.getData();
  }

  /**
   * 
   * Closes the specific session.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @return ApiResponse&lt;CloseSessionResponseBody&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CloseSessionResponseBody> closeSessionWithHttpInfo(UUID sessionHandle) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = closeSessionRequestBuilder(sessionHandle);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "closeSession call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<CloseSessionResponseBody>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CloseSessionResponseBody>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder closeSessionRequestBuilder(UUID sessionHandle) throws ApiException {
    // verify the required parameter 'sessionHandle' is set
    if (sessionHandle == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionHandle' when calling closeSession");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sessions/{session_handle}"
        .replace("{session_handle}", ApiClient.urlEncode(sessionHandle.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Execute a statement.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @param executeStatementRequestBody  (optional)
   * @return ExecuteStatementResponseBody
   * @throws ApiException if fails to make API call
   */
  public ExecuteStatementResponseBody executeStatement(UUID sessionHandle, ExecuteStatementRequestBody executeStatementRequestBody) throws ApiException {
    ApiResponse<ExecuteStatementResponseBody> localVarResponse = executeStatementWithHttpInfo(sessionHandle, executeStatementRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * Execute a statement.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @param executeStatementRequestBody  (optional)
   * @return ApiResponse&lt;ExecuteStatementResponseBody&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExecuteStatementResponseBody> executeStatementWithHttpInfo(UUID sessionHandle, ExecuteStatementRequestBody executeStatementRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = executeStatementRequestBuilder(sessionHandle, executeStatementRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "executeStatement call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<ExecuteStatementResponseBody>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExecuteStatementResponseBody>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder executeStatementRequestBuilder(UUID sessionHandle, ExecuteStatementRequestBody executeStatementRequestBody) throws ApiException {
    // verify the required parameter 'sessionHandle' is set
    if (sessionHandle == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionHandle' when calling executeStatement");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sessions/{session_handle}/statements"
        .replace("{session_handle}", ApiClient.urlEncode(sessionHandle.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(executeStatementRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Fetch results of Operation.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @param operationHandle The OperationHandle that identifies a operation. (required)
   * @param token The OperationHandle that identifies a operation. (required)
   * @return FetchResultsResponseBody
   * @throws ApiException if fails to make API call
   */
  public FetchResultsResponseBody fetchResults(UUID sessionHandle, UUID operationHandle, Long token) throws ApiException {
    ApiResponse<FetchResultsResponseBody> localVarResponse = fetchResultsWithHttpInfo(sessionHandle, operationHandle, token);
    return localVarResponse.getData();
  }

  /**
   * 
   * Fetch results of Operation.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @param operationHandle The OperationHandle that identifies a operation. (required)
   * @param token The OperationHandle that identifies a operation. (required)
   * @return ApiResponse&lt;FetchResultsResponseBody&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FetchResultsResponseBody> fetchResultsWithHttpInfo(UUID sessionHandle, UUID operationHandle, Long token) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fetchResultsRequestBuilder(sessionHandle, operationHandle, token);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "fetchResults call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<FetchResultsResponseBody>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FetchResultsResponseBody>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fetchResultsRequestBuilder(UUID sessionHandle, UUID operationHandle, Long token) throws ApiException {
    // verify the required parameter 'sessionHandle' is set
    if (sessionHandle == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionHandle' when calling fetchResults");
    }
    // verify the required parameter 'operationHandle' is set
    if (operationHandle == null) {
      throw new ApiException(400, "Missing the required parameter 'operationHandle' when calling fetchResults");
    }
    // verify the required parameter 'token' is set
    if (token == null) {
      throw new ApiException(400, "Missing the required parameter 'token' when calling fetchResults");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sessions/{session_handle}/operations/{operation_handle}/result/{token}"
        .replace("{session_handle}", ApiClient.urlEncode(sessionHandle.toString()))
        .replace("{operation_handle}", ApiClient.urlEncode(operationHandle.toString()))
        .replace("{token}", ApiClient.urlEncode(token.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get the current available versions for the Rest Endpoint. The client can choose one of the return version as the protocol for later communicate.
   * @return GetApiVersionResponseBody
   * @throws ApiException if fails to make API call
   */
  public GetApiVersionResponseBody getApiVersion() throws ApiException {
    ApiResponse<GetApiVersionResponseBody> localVarResponse = getApiVersionWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Get the current available versions for the Rest Endpoint. The client can choose one of the return version as the protocol for later communicate.
   * @return ApiResponse&lt;GetApiVersionResponseBody&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetApiVersionResponseBody> getApiVersionWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getApiVersionRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getApiVersion call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<GetApiVersionResponseBody>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetApiVersionResponseBody>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getApiVersionRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api_versions";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get meta data for this cluster.
   * @return GetInfoResponseBody
   * @throws ApiException if fails to make API call
   */
  public GetInfoResponseBody getInfo() throws ApiException {
    ApiResponse<GetInfoResponseBody> localVarResponse = getInfoWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Get meta data for this cluster.
   * @return ApiResponse&lt;GetInfoResponseBody&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetInfoResponseBody> getInfoWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInfoRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getInfo call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<GetInfoResponseBody>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetInfoResponseBody>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInfoRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/info";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get the status of operation.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @param operationHandle The OperationHandle that identifies a operation. (required)
   * @return OperationStatusResponseBody
   * @throws ApiException if fails to make API call
   */
  public OperationStatusResponseBody getOperationStatus(UUID sessionHandle, UUID operationHandle) throws ApiException {
    ApiResponse<OperationStatusResponseBody> localVarResponse = getOperationStatusWithHttpInfo(sessionHandle, operationHandle);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get the status of operation.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @param operationHandle The OperationHandle that identifies a operation. (required)
   * @return ApiResponse&lt;OperationStatusResponseBody&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OperationStatusResponseBody> getOperationStatusWithHttpInfo(UUID sessionHandle, UUID operationHandle) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getOperationStatusRequestBuilder(sessionHandle, operationHandle);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getOperationStatus call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<OperationStatusResponseBody>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OperationStatusResponseBody>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getOperationStatusRequestBuilder(UUID sessionHandle, UUID operationHandle) throws ApiException {
    // verify the required parameter 'sessionHandle' is set
    if (sessionHandle == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionHandle' when calling getOperationStatus");
    }
    // verify the required parameter 'operationHandle' is set
    if (operationHandle == null) {
      throw new ApiException(400, "Missing the required parameter 'operationHandle' when calling getOperationStatus");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sessions/{session_handle}/operations/{operation_handle}/status"
        .replace("{session_handle}", ApiClient.urlEncode(sessionHandle.toString()))
        .replace("{operation_handle}", ApiClient.urlEncode(operationHandle.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get the session configuration.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @return GetSessionConfigResponseBody
   * @throws ApiException if fails to make API call
   */
  public GetSessionConfigResponseBody getSessionConfig(UUID sessionHandle) throws ApiException {
    ApiResponse<GetSessionConfigResponseBody> localVarResponse = getSessionConfigWithHttpInfo(sessionHandle);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get the session configuration.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @return ApiResponse&lt;GetSessionConfigResponseBody&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetSessionConfigResponseBody> getSessionConfigWithHttpInfo(UUID sessionHandle) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSessionConfigRequestBuilder(sessionHandle);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getSessionConfig call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<GetSessionConfigResponseBody>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetSessionConfigResponseBody>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSessionConfigRequestBuilder(UUID sessionHandle) throws ApiException {
    // verify the required parameter 'sessionHandle' is set
    if (sessionHandle == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionHandle' when calling getSessionConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sessions/{session_handle}"
        .replace("{session_handle}", ApiClient.urlEncode(sessionHandle.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Opens a new session with specific properties. Specific properties can be given for current session which will override the default properties of gateway.
   * @param openSessionRequestBody  (optional)
   * @return OpenSessionResponseBody
   * @throws ApiException if fails to make API call
   */
  public OpenSessionResponseBody openSession(OpenSessionRequestBody openSessionRequestBody) throws ApiException {
    ApiResponse<OpenSessionResponseBody> localVarResponse = openSessionWithHttpInfo(openSessionRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * Opens a new session with specific properties. Specific properties can be given for current session which will override the default properties of gateway.
   * @param openSessionRequestBody  (optional)
   * @return ApiResponse&lt;OpenSessionResponseBody&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OpenSessionResponseBody> openSessionWithHttpInfo(OpenSessionRequestBody openSessionRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = openSessionRequestBuilder(openSessionRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "openSession call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<OpenSessionResponseBody>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenSessionResponseBody>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder openSessionRequestBuilder(OpenSessionRequestBody openSessionRequestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sessions";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(openSessionRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Trigger heartbeat to tell the server that the client is active, and to keep the session alive as long as configured timeout value.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @throws ApiException if fails to make API call
   */
  public void triggerSession(SessionHandle sessionHandle) throws ApiException {
    triggerSessionWithHttpInfo(sessionHandle);
  }

  /**
   * 
   * Trigger heartbeat to tell the server that the client is active, and to keep the session alive as long as configured timeout value.
   * @param sessionHandle The SessionHandle that identifies a session. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> triggerSessionWithHttpInfo(SessionHandle sessionHandle) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = triggerSessionRequestBuilder(sessionHandle);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "triggerSession call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder triggerSessionRequestBuilder(SessionHandle sessionHandle) throws ApiException {
    // verify the required parameter 'sessionHandle' is set
    if (sessionHandle == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionHandle' when calling triggerSession");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sessions/{session_handle}/heartbeat"
        .replace("{session_handle}", ApiClient.urlEncode(sessionHandle.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
